# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AnalyticData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, last_time_stamp: datetime=None, record: object=None, average_duration: float=None, heartrate: object=None):  # noqa: E501
        """AnalyticData - a model defined in Swagger

        :param last_time_stamp: The last_time_stamp of this AnalyticData.  # noqa: E501
        :type last_time_stamp: datetime
        :param record: The record of this AnalyticData.  # noqa: E501
        :type record: object
        :param average_duration: The average_duration of this AnalyticData.  # noqa: E501
        :type average_duration: float
        :param heartrate: The heartrate of this AnalyticData.  # noqa: E501
        :type heartrate: object
        """
        self.swagger_types = {
            'last_time_stamp': datetime,
            'record': object,
            'average_duration': float,
            'heartrate': object
        }

        self.attribute_map = {
            'last_time_stamp': 'last_time_stamp',
            'record': 'record',
            'average_duration': 'average_duration',
            'heartrate': 'heartrate'
        }
        self._last_time_stamp = last_time_stamp
        self._record = record
        self._average_duration = average_duration
        self._heartrate = heartrate

    @classmethod
    def from_dict(cls, dikt) -> 'AnalyticData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200 of this AnalyticData.  # noqa: E501
        :rtype: AnalyticData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_time_stamp(self) -> datetime:
        """Gets the last_time_stamp of this AnalyticData.


        :return: The last_time_stamp of this AnalyticData.
        :rtype: datetime
        """
        return self._last_time_stamp

    @last_time_stamp.setter
    def last_time_stamp(self, last_time_stamp: datetime):
        """Sets the last_time_stamp of this AnalyticData.


        :param last_time_stamp: The last_time_stamp of this AnalyticData.
        :type last_time_stamp: datetime
        """

        self._last_time_stamp = last_time_stamp

    @property
    def record(self) -> object:
        """Gets the record of this AnalyticData.


        :return: The record of this AnalyticData.
        :rtype: object
        """
        return self._record

    @record.setter
    def record(self, record: object):
        """Sets the record of this AnalyticData.


        :param record: The record of this AnalyticData.
        :type record: object
        """

        self._record = record

    @property
    def average_duration(self) -> float:
        """Gets the average_duration of this AnalyticData.


        :return: The average_duration of this AnalyticData.
        :rtype: float
        """
        return self._average_duration

    @average_duration.setter
    def average_duration(self, average_duration: float):
        """Sets the average_duration of this AnalyticData.


        :param average_duration: The average_duration of this AnalyticData.
        :type average_duration: float
        """

        self._average_duration = average_duration

    @property
    def heartrate(self) -> object:
        """Gets the heartrate of this AnalyticData.


        :return: The heartrate of this AnalyticData.
        :rtype: object
        """
        return self._heartrate

    @heartrate.setter
    def heartrate(self, heartrate: object):
        """Sets the heartrate of this AnalyticData.


        :param heartrate: The heartrate of this AnalyticData.
        :type heartrate: object
        """

        self._heartrate = heartrate
